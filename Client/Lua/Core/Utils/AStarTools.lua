---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2019/5/29 23:15
---

---@class Game.Core.Utils.AStarTools
local AStarTools = {}


---@param grid AStar.Grid
---@param center UnityEngine.Vector3
---@return UnityEngine.Rect
function AStarTools.GetAreaNodeRect(grid, center, w, h)
    local node = grid:NodeFromWorldPoint(center) ---@type AStar.Node
    local rect = Rect.New(node.gridX, node.gridY, w, h)
    return rect
end

--矩形区域随机世界坐标数组
---@param rect UnityEngine.Rect
function AStarTools.GetRectRandomPos(start, rect, r)
    local points = {}
    local idx = 1
    local randoms = Math3D.GetRandomArray(rect.width * rect.height)
    local L = r * 2
    for i = 1, rect.height do
        for j = 1, rect.width do
            local pt = start + Vector3.New(r + (j - 1) * L, 0, r + (i - 1) * L)
            points[randoms[idx]] = pt
            idx = idx + 1
        end
    end
    return points
end

--格子是否相等
---@param node1 AStar.Node
---@param node2 AStar.Node
function AStarTools.isEqualNode(node1, node2)
    return node1.gridX == node2.gridX and node1.gridY == node2.gridY
end

--在限定范围内随机上下左右方向点
---@param grid AStar.Grid
---@param src AStar.Node
---@return AStar.Node
function AStarTools.GetRandomNeighboursNode(grid, src)
    local rx = math.random(-1,1)
    local ry = math.random(-1,1)
    if rx == 0 and ry == 0 then
        return nil
    end
    if src.gridX + rx >= 0 and src.gridX + rx < grid.gridSizeX
            and src.gridY + ry >= 0 and src.gridY + ry < grid.gridSizeY then
        local node = World.grid:GetNode(src.gridX + rx, src.gridY + ry)
        if node.walkable then
            return node
        end
    end
    return nil
end


--在限定范围内随机上下左右方向点
---@param limitRect UnityEngine.Rect
---@param src AStar.Node
---@return AStar.Node
function AStarTools.GetRandomLimitedNode(limitRect, src)
    local rx = math.random(-1,1)
    local ry = math.random(-1,1)
    if rx == 0 and ry == 0 then
        return nil
    end
    rx = src.gridX + rx
    ry = src.gridY + ry
    if limitRect:Contains(Vector2.New(rx,ry)) then
        return World.grid:GetNode(rx, ry)
    end
    return nil
end

--在限定范围内随机上下左右方向点
---@param rect UnityEngine.Rect
---@param src AStar.Node
---@return AStar.Node
function AStarTools.GetNearestNode(rect, src)
    local minDistance = Mathf.Infinity
    local node = nil;
    for i = 1, rect.height do
        for j = 1, rect.width do
            local distance = AStarTools.Distance(src, rect.x + (j - 1), rect.y + (i - 1))
            if distance < minDistance then
                minDistance = distance
                node = World.grid:GetNode(rect.x + (j - 1), rect.y + (i - 1))
            end
        end
    end
    return node
end

---@param src AStar.Node
function AStarTools.Distance(src, x, y)
    return Vector2.Distance(Vector2.New(src.gridX, src.gridY), Vector2.New(x, y))
end

return AStarTools
    

    