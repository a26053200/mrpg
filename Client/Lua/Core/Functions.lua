---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.
--- DateTime: 2019/5/26 0:58
---


local _handler = handler
local _EventMap = {} ---@type table<string, fun()>

---
---@param type string
---@param handler fun()
function AddEventListener(type, callback, caller)
    if callback == nil or caller == nil then
        logError("error params! callback or caller can not be nil!")
        return
    end
    local key = tostring(caller) .. tostring(callback)
    if _EventMap[key] ~= nil then
        --logError("re register event!")
        return
    end
    local handler = _handler(caller, callback)
    _EventMap[key] = handler
    if type == Event.Update then
        monoMgr:AddUpdateFun(handler)
    elseif type == Event.LateUpdate then
        monoMgr:AddLateUpdateFun(handler)
    elseif type == Event.FixedUpdate then
        monoMgr:AddFixedUpdateFun(handler)
    end
end

function RemoveEventListener(type, callback, caller)
    if callback == nil or caller == nil then
        logError("error params! callback or caller can not be nil!")
        return
    end
    local key = tostring(caller) .. tostring(callback)
    if _EventMap[key] == nil then
        return
    end
    local handler = _EventMap[key]
    if type == Event.Update then
        monoMgr:RemoveUpdateFun(handler)
    elseif type == Event.LateUpdate then
        monoMgr:RemoveLateUpdateFun(handler)
    elseif type == Event.FixedUpdate then
        monoMgr:RemoveFixedUpdateFun(handler)
    end
end

local _DelayEventMap = {} ---@type table<string, fun()>

local function update()
    local del = {}
    for k, handler in pairs(_DelayEventMap) do
        if Time.time - handler.startTime > handler.delay then
            handler:Execute()
            table.insert(del, k)
        end
    end
    for i = 1, #del do
        _DelayEventMap[del[i]] = nil
    end
end

local function delayStart()
    monoMgr:AddUpdateFun(update)
end

---@param callback Handler
function DelayCallback(delay, handler)
    local key
    if isFunction(handler) then
        key = tostring(handler)
    else
        if handler.callback == nil then
            logError("error params! handler.callback can not be nil!")
            return
        end
        if handler.caller then
            key = tostring(handler.caller) .. tostring(handler.callback)
        else
            key = tostring(handler.callback)
        end
    end
    --if _DelayEventMap[key] ~= nil then
    --    logError("re register event!")
    --    _DelayEventMap[key] = nil
    --    return
    --end
    if isFunction(handler) then
        _DelayEventMap[key] = Handler.New(handler)
    else
        _DelayEventMap[key] = handler
    end
    _DelayEventMap[key].startTime = Time.time
    _DelayEventMap[key].delay = delay
end

delayStart()